"use strict";var E=Object.defineProperty,L=Object.defineProperties;var $=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var y=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var h=(e,t,l)=>t in e?E(e,t,{enumerable:!0,configurable:!0,writable:!0,value:l}):e[t]=l,b=(e,t)=>{for(var l in t||(t={}))y.call(t,l)&&h(e,l,t[l]);if(i)for(var l of i(t))x.call(t,l)&&h(e,l,t[l]);return e},C=(e,t)=>L(e,$(t));var m=(e,t)=>{var l={};for(var o in e)y.call(e,o)&&t.indexOf(o)<0&&(l[o]=e[o]);if(e!=null&&i)for(var o of i(e))t.indexOf(o)<0&&x.call(e,o)&&(l[o]=e[o]);return l};Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const z=require("react"),B=require("prop-types"),S=require("styled-components"),F=require("../themes/sizes.cjs"),V=require("../themes/utils.cjs"),T=require("../Typography/Typography.cjs"),W=require("../VisuallyHidden/VisuallyHidden.cjs"),H=require("../Box/Box.cjs"),M=require("../Flex/Flex.cjs"),p=e=>e&&typeof e=="object"&&"default"in e?e:{default:e},a=p(z),u=p(B),s=p(S),P=s.default.label`
  position: relative;
  display: inline-block;
  z-index: 0;
  width: 100%;
`,I=s.default(H.Box)`
  cursor: ${({disabled:e})=>e?"not-allowed":void 0};
  // Masks the background of each value
  overflow: hidden;
  flex-wrap: wrap;

  ${V.inputFocusStyle()}
`,w=s.default(M.Flex).attrs({hasRadius:!0})`
  background-color: ${({theme:e,checked:t,disabled:l})=>t?l?e.colors.neutral200:e.colors.neutral0:"transparent"};
  border: 1px solid
    ${({theme:e,checked:t,disabled:l})=>t&&t!==null?l?e.colors.neutral300:e.colors.neutral200:l?e.colors.neutral150:e.colors.neutral100};
  position: relative;
  user-select: none;
  z-index: 2;
  flex: 1 1 50%;
  /**
    We declare the defined value because we want the height of the input when 
    the values are in a row to be 40px. But defining a height on the label
    would break the input when it wraps.
  */
  padding-top: ${({size:e})=>`${e==="S"?"2px":"6px"}`};
  padding-bottom: ${({size:e})=>`${e==="S"?"2px":"6px"}`};
`,O=s.default.input`
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 1;
  width: 100%;
`,d=a.default.forwardRef((D,j)=>{var f=D,{size:e,onLabel:t,offLabel:l,children:o,checked:r,disabled:n,onChange:q}=f,v=m(f,["size","onLabel","offLabel","children","checked","disabled","onChange"]);const g="neutral600";let k=!r&&r!==null?"danger700":g,R=r?"primary600":g;const _=c=>{n||q(c)};return a.default.createElement(P,null,a.default.createElement(W.VisuallyHidden,null,o),a.default.createElement(I,{hasRadius:!0,disabled:n,padding:1,display:"flex",background:n?"neutral150":"neutral100",borderStyle:"solid",borderWidth:"1px",borderColor:"neutral200"},a.default.createElement(w,{size:e,paddingLeft:3,paddingRight:3,justifyContent:"center",alignItems:"center","aria-hidden":!0,checked:r===null?!1:!r,disabled:n},a.default.createElement(T.Typography,{variant:"pi",fontWeight:"bold",textTransform:"uppercase",textColor:n?"neutral700":k},l)),a.default.createElement(w,{size:e,paddingLeft:3,paddingRight:3,justifyContent:"center",alignItems:"center","aria-hidden":!0,checked:r===null?!1:r,disabled:n},a.default.createElement(T.Typography,{variant:"pi",fontWeight:"bold",textTransform:"uppercase",textColor:n?"neutral700":R},t)),a.default.createElement(O,C(b({type:"checkbox","aria-disabled":n,onChange:c=>_(c),ref:j},v),{checked:!(r===null||!r)}))))});d.displayName="ToggleCheckbox";d.defaultProps={disabled:!1,checked:!1,onChange:void 0,size:"M"};d.propTypes={checked:u.default.bool,children:u.default.string.isRequired,disabled:u.default.bool,offLabel:u.default.string.isRequired,onChange:u.default.func,onLabel:u.default.string.isRequired,size:u.default.oneOf(Object.keys(F.sizes.input))};exports.ToggleCheckbox=d;
