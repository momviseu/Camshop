var L = Object.defineProperty, z = Object.defineProperties;
var W = Object.getOwnPropertyDescriptors;
var u = Object.getOwnPropertySymbols;
var h = Object.prototype.hasOwnProperty, m = Object.prototype.propertyIsEnumerable;
var g = (e, t, r) => t in e ? L(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, b = (e, t) => {
  for (var r in t || (t = {}))
    h.call(t, r) && g(e, r, t[r]);
  if (u)
    for (var r of u(t))
      m.call(t, r) && g(e, r, t[r]);
  return e;
}, x = (e, t) => z(e, W(t));
var y = (e, t) => {
  var r = {};
  for (var o in e)
    h.call(e, o) && t.indexOf(o) < 0 && (r[o] = e[o]);
  if (e != null && u)
    for (var o of u(e))
      t.indexOf(o) < 0 && m.call(e, o) && (r[o] = e[o]);
  return r;
};
import l from "react";
import i from "prop-types";
import p from "styled-components";
import { sizes as S } from "../themes/sizes.js";
import { inputFocusStyle as j } from "../themes/utils.js";
import { Typography as C } from "../Typography/Typography.js";
import { VisuallyHidden as q } from "../VisuallyHidden/VisuallyHidden.js";
import { Box as B } from "../Box/Box.js";
import { Flex as I } from "../Flex/Flex.js";
const F = p.label`
  position: relative;
  display: inline-block;
  z-index: 0;
  width: 100%;
`, M = p(B)`
  cursor: ${({ disabled: e }) => e ? "not-allowed" : void 0};
  // Masks the background of each value
  overflow: hidden;
  flex-wrap: wrap;

  ${j()}
`, w = p(I).attrs({
  hasRadius: !0
})`
  background-color: ${({ theme: e, checked: t, disabled: r }) => t ? r ? e.colors.neutral200 : e.colors.neutral0 : "transparent"};
  border: 1px solid
    ${({ theme: e, checked: t, disabled: r }) => t && t !== null ? r ? e.colors.neutral300 : e.colors.neutral200 : r ? e.colors.neutral150 : e.colors.neutral100};
  position: relative;
  user-select: none;
  z-index: 2;
  flex: 1 1 50%;
  /**
    We declare the defined value because we want the height of the input when 
    the values are in a row to be 40px. But defining a height on the label
    would break the input when it wraps.
  */
  padding-top: ${({ size: e }) => `${e === "S" ? "2px" : "6px"}`};
  padding-bottom: ${({ size: e }) => `${e === "S" ? "2px" : "6px"}`};
`, O = p.input`
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 1;
  width: 100%;
`, d = l.forwardRef(
  (P, R) => {
    var f = P, { size: e, onLabel: t, offLabel: r, children: o, checked: n, disabled: a, onChange: v } = f, k = y(f, ["size", "onLabel", "offLabel", "children", "checked", "disabled", "onChange"]);
    const c = "neutral600";
    let E = !n && n !== null ? "danger700" : c, T = n ? "primary600" : c;
    const $ = (s) => {
      a || v(s);
    };
    return /* @__PURE__ */ l.createElement(F, null, /* @__PURE__ */ l.createElement(q, null, o), /* @__PURE__ */ l.createElement(M, {
      hasRadius: !0,
      disabled: a,
      padding: 1,
      display: "flex",
      background: a ? "neutral150" : "neutral100",
      borderStyle: "solid",
      borderWidth: "1px",
      borderColor: "neutral200"
    }, /* @__PURE__ */ l.createElement(w, {
      size: e,
      paddingLeft: 3,
      paddingRight: 3,
      justifyContent: "center",
      alignItems: "center",
      "aria-hidden": !0,
      checked: n === null ? !1 : !n,
      disabled: a
    }, /* @__PURE__ */ l.createElement(C, {
      variant: "pi",
      fontWeight: "bold",
      textTransform: "uppercase",
      textColor: a ? "neutral700" : E
    }, r)), /* @__PURE__ */ l.createElement(w, {
      size: e,
      paddingLeft: 3,
      paddingRight: 3,
      justifyContent: "center",
      alignItems: "center",
      "aria-hidden": !0,
      checked: n === null ? !1 : n,
      disabled: a
    }, /* @__PURE__ */ l.createElement(C, {
      variant: "pi",
      fontWeight: "bold",
      textTransform: "uppercase",
      textColor: a ? "neutral700" : T
    }, t)), /* @__PURE__ */ l.createElement(O, x(b({
      type: "checkbox",
      "aria-disabled": a,
      onChange: (s) => $(s),
      ref: R
    }, k), {
      checked: !(n === null || !n)
    }))));
  }
);
d.displayName = "ToggleCheckbox";
d.defaultProps = {
  disabled: !1,
  checked: !1,
  onChange: void 0,
  size: "M"
};
d.propTypes = {
  checked: i.bool,
  children: i.string.isRequired,
  disabled: i.bool,
  offLabel: i.string.isRequired,
  onChange: i.func,
  onLabel: i.string.isRequired,
  size: i.oneOf(Object.keys(S.input))
};
export {
  d as ToggleCheckbox
};
