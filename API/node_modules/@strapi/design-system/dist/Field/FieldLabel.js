var b = Object.defineProperty;
var l = Object.getOwnPropertySymbols;
var p = Object.prototype.hasOwnProperty, s = Object.prototype.propertyIsEnumerable;
var m = (e, r, t) => r in e ? b(e, r, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[r] = t, c = (e, r) => {
  for (var t in r || (r = {}))
    p.call(r, t) && m(e, t, r[t]);
  if (l)
    for (var t of l(r))
      s.call(r, t) && m(e, t, r[t]);
  return e;
};
var d = (e, r) => {
  var t = {};
  for (var o in e)
    p.call(e, o) && r.indexOf(o) < 0 && (t[o] = e[o]);
  if (e != null && l)
    for (var o of l(e))
      r.indexOf(o) < 0 && s.call(e, o) && (t[o] = e[o]);
  return t;
};
import i from "react";
import f from "styled-components";
import n from "prop-types";
import { Flex as h } from "../Flex/Flex.js";
import { useField as x } from "./FieldContext.js";
import { Typography as g } from "../Typography/Typography.js";
const E = f(g)`
  line-height: 0;
`, F = f(h)`
  line-height: 0;

  svg path {
    fill: ${({ theme: e }) => e.colors.neutral500};
  }
`, u = (T) => {
  var a = T, { children: e, required: r, action: t } = a, o = d(a, ["children", "required", "action"]);
  const { id: y } = x();
  return /* @__PURE__ */ i.createElement(g, c({
    variant: "pi",
    textColor: "neutral800",
    htmlFor: y,
    fontWeight: "bold",
    as: "label",
    required: r
  }, o), /* @__PURE__ */ i.createElement(h, {
    alignItems: "center"
  }, e, r && /* @__PURE__ */ i.createElement(E, {
    textColor: "danger600"
  }, "*"), t && /* @__PURE__ */ i.createElement(F, {
    marginLeft: 1
  }, t)));
};
u.defaultProps = {
  required: !1,
  action: void 0
};
u.propTypes = {
  action: n.element,
  children: n.node.isRequired,
  required: n.bool
};
export {
  u as FieldLabel
};
