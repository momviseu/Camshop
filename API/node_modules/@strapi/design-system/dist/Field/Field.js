var g = Object.defineProperty;
var n = Object.getOwnPropertySymbols;
var m = Object.prototype.hasOwnProperty, a = Object.prototype.propertyIsEnumerable;
var p = (e, o, r) => o in e ? g(e, o, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[o] = r, f = (e, o) => {
  for (var r in o || (o = {}))
    m.call(o, r) && p(e, r, o[r]);
  if (n)
    for (var r of n(o))
      a.call(o, r) && p(e, r, o[r]);
  return e;
};
var s = (e, o) => {
  var r = {};
  for (var t in e)
    m.call(e, t) && o.indexOf(t) < 0 && (r[t] = e[t]);
  if (e != null && n)
    for (var t of n(e))
      o.indexOf(t) < 0 && a.call(e, t) && (r[t] = e[t]);
  return r;
};
import l from "react";
import i from "prop-types";
import { FieldContext as T } from "./FieldContext.js";
import { useId as O } from "../helpers/useId.js";
const u = (h) => {
  var d = h, { children: e, name: o, error: r, hint: t, id: v } = d, c = s(d, ["children", "name", "error", "hint", "id"]);
  const y = O("field", v);
  return /* @__PURE__ */ l.createElement("div", f({}, c), /* @__PURE__ */ l.createElement(T.Provider, {
    value: { name: o, id: y, error: r, hint: t }
  }, e));
};
u.defaultProps = {
  error: void 0,
  hint: void 0,
  id: void 0,
  name: void 0
};
u.propTypes = {
  children: i.node.isRequired,
  error: i.oneOfType([i.string, i.bool]),
  hint: i.oneOfType([i.string, i.node, i.arrayOf(i.node)]),
  id: i.oneOfType([i.string, i.number]),
  name: i.string
};
export {
  u as Field
};
